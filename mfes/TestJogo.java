//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-08 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "C:\\Users\\joao\\Desktop\\MFES-RTFS\\TestJogo.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class TestJogo implements EvaluatePP {

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=TestJogoSentinel KEEP=NO
  class TestJogoSentinel extends Sentinel {

    public final int AssertTrue = 0;

    public final int TestJogada = 1;

    public final int TestTrocaTurn = 2;

    public final int nr_functions = 3;


    public TestJogoSentinel () throws CGException {}


    public TestJogoSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=TestJogoSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new TestJogoSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_TestJogo KEEP=NO
  private void vdm_init_TestJogo () {
    try {
      setSentinel();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_TestJogo


// ***** VDMTOOLS START Name=TestJogo KEEP=NO
  public TestJogo () throws CGException {
    vdm_init_TestJogo();
  }
// ***** VDMTOOLS END Name=TestJogo


// ***** VDMTOOLS START Name=AssertTrue#1|Boolean KEEP=NO
  public void AssertTrue (final Boolean a) throws CGException {
    sentinel.entering(((TestJogoSentinel)sentinel).AssertTrue);
    try {
      if (!this.pre_AssertTrue(a).booleanValue()) 
        UTIL.RunTime("Precondition failure in AssertTrue");
      return;
    }
    finally {
      sentinel.leaving(((TestJogoSentinel)sentinel).AssertTrue);
    }
  }
// ***** VDMTOOLS END Name=AssertTrue#1|Boolean


// ***** VDMTOOLS START Name=pre_AssertTrue#1|Boolean KEEP=NO
  public Boolean pre_AssertTrue (final Boolean a) throws CGException {
    return a;
  }
// ***** VDMTOOLS END Name=pre_AssertTrue#1|Boolean


// ***** VDMTOOLS START Name=TestTrocaTurn KEEP=NO
  public void TestTrocaTurn () throws CGException {
    sentinel.entering(((TestJogoSentinel)sentinel).TestTrocaTurn);
    try {
      Jogador p = new Jogador(new Integer(1));
      Jogador p2 = new Jogador(new Integer(2));
      Tabuleiro tab = new Tabuleiro();
      Jogo jogo = new Jogo(p, p2, tab);
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 1));
      jogo.trocaTurn();
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 2));
      jogo.trocaTurn();
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 1));
      jogo.trocaTurn();
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 2));
      jogo.reset();
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 1));
    }
    finally {
      sentinel.leaving(((TestJogoSentinel)sentinel).TestTrocaTurn);
    }
  }
// ***** VDMTOOLS END Name=TestTrocaTurn


// ***** VDMTOOLS START Name=TestJogada KEEP=NO
  public void TestJogada () throws CGException {
    sentinel.entering(((TestJogoSentinel)sentinel).TestJogada);
    try {
      Jogador p = new Jogador(new Integer(1));
      Jogador p2 = new Jogador(new Integer(2));
      Tabuleiro tab = new Tabuleiro();
      Jogo jogo = new Jogo(p, p2, tab);
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 1));
      List tmpSeq_12 = new ArrayList();
      tmpSeq_12.add(new Integer(1));
      tmpSeq_12.add(new Integer(1));
      List tmpSeq_16 = new ArrayList();
      tmpSeq_16.add(new Integer(1));
      tmpSeq_16.add(new Integer(2));
      jogo.jogada(tmpSeq_12, tmpSeq_16);
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 2));
      List tmpSeq_25 = new ArrayList();
      tmpSeq_25.add(new Integer(9));
      tmpSeq_25.add(new Integer(1));
      List tmpSeq_29 = new ArrayList();
      tmpSeq_29.add(new Integer(9));
      tmpSeq_29.add(new Integer(2));
      jogo.jogada(tmpSeq_25, tmpSeq_29);
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 1));
      List tmpSeq_38 = new ArrayList();
      tmpSeq_38.add(new Integer(3));
      tmpSeq_38.add(new Integer(7));
      List tmpSeq_42 = new ArrayList();
      tmpSeq_42.add(new Integer(4));
      tmpSeq_42.add(new Integer(7));
      jogo.jogada(tmpSeq_38, tmpSeq_42);
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 2));
      List tmpSeq_51 = new ArrayList();
      tmpSeq_51.add(new Integer(7));
      tmpSeq_51.add(new Integer(7));
      List tmpSeq_55 = new ArrayList();
      tmpSeq_55.add(new Integer(6));
      tmpSeq_55.add(new Integer(7));
      jogo.jogada(tmpSeq_51, tmpSeq_55);
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 1));
      List tmpSeq_64 = new ArrayList();
      tmpSeq_64.add(new Integer(4));
      tmpSeq_64.add(new Integer(7));
      List tmpSeq_68 = new ArrayList();
      tmpSeq_68.add(new Integer(5));
      tmpSeq_68.add(new Integer(7));
      jogo.jogada(tmpSeq_64, tmpSeq_68);
      AssertTrue(Boolean.valueOf(jogo.getTurn().intValue() == 2));
      List tmpSeq_80 = new ArrayList();
      tmpSeq_80.add(new Integer(5));
      tmpSeq_80.add(new Integer(7));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_80), new quotes.ELEFANTE1())));
      List tmpSeq_86 = new ArrayList();
      tmpSeq_86.add(new Integer(6));
      tmpSeq_86.add(new Integer(7));
      List tmpSeq_90 = new ArrayList();
      tmpSeq_90.add(new Integer(5));
      tmpSeq_90.add(new Integer(7));
      jogo.jogada(tmpSeq_86, tmpSeq_90);
      List tmpSeq_98 = new ArrayList();
      tmpSeq_98.add(new Integer(3));
      tmpSeq_98.add(new Integer(1));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_98), new quotes.RATO1())));
      List tmpSeq_104 = new ArrayList();
      tmpSeq_104.add(new Integer(3));
      tmpSeq_104.add(new Integer(1));
      List tmpSeq_108 = new ArrayList();
      tmpSeq_108.add(new Integer(4));
      tmpSeq_108.add(new Integer(1));
      jogo.jogada(tmpSeq_104, tmpSeq_108);
      List tmpSeq_116 = new ArrayList();
      tmpSeq_116.add(new Integer(4));
      tmpSeq_116.add(new Integer(1));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_116), new quotes.RATO1())));
      List tmpSeq_125 = new ArrayList();
      tmpSeq_125.add(new Integer(7));
      tmpSeq_125.add(new Integer(1));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_125), new quotes.ELEFANTE2())));
      List tmpSeq_131 = new ArrayList();
      tmpSeq_131.add(new Integer(7));
      tmpSeq_131.add(new Integer(1));
      List tmpSeq_135 = new ArrayList();
      tmpSeq_135.add(new Integer(6));
      tmpSeq_135.add(new Integer(1));
      jogo.jogada(tmpSeq_131, tmpSeq_135);
      List tmpSeq_143 = new ArrayList();
      tmpSeq_143.add(new Integer(6));
      tmpSeq_143.add(new Integer(1));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_143), new quotes.ELEFANTE2())));
      List tmpSeq_149 = new ArrayList();
      tmpSeq_149.add(new Integer(4));
      tmpSeq_149.add(new Integer(1));
      List tmpSeq_153 = new ArrayList();
      tmpSeq_153.add(new Integer(5));
      tmpSeq_153.add(new Integer(1));
      jogo.jogada(tmpSeq_149, tmpSeq_153);
      List tmpSeq_161 = new ArrayList();
      tmpSeq_161.add(new Integer(5));
      tmpSeq_161.add(new Integer(1));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_161), new quotes.RATO1())));
      List tmpSeq_167 = new ArrayList();
      tmpSeq_167.add(new Integer(8));
      tmpSeq_167.add(new Integer(6));
      List tmpSeq_171 = new ArrayList();
      tmpSeq_171.add(new Integer(8));
      tmpSeq_171.add(new Integer(7));
      jogo.jogada(tmpSeq_167, tmpSeq_171);
      List tmpSeq_179 = new ArrayList();
      tmpSeq_179.add(new Integer(5));
      tmpSeq_179.add(new Integer(1));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_179), new quotes.RATO1())));
      List tmpSeq_188 = new ArrayList();
      tmpSeq_188.add(new Integer(6));
      tmpSeq_188.add(new Integer(1));
      AssertTrue(Boolean.valueOf(UTIL.equals(tab.getBoard().get(tmpSeq_188), new quotes.ELEFANTE2())));
      List tmpSeq_194 = new ArrayList();
      tmpSeq_194.add(new Integer(5));
      tmpSeq_194.add(new Integer(1));
      List tmpSeq_198 = new ArrayList();
      tmpSeq_198.add(new Integer(6));
      tmpSeq_198.add(new Integer(1));
      jogo.jogada(tmpSeq_194, tmpSeq_198);
    }
    finally {
      sentinel.leaving(((TestJogoSentinel)sentinel).TestJogada);
    }
  }
// ***** VDMTOOLS END Name=TestJogada

}
;
